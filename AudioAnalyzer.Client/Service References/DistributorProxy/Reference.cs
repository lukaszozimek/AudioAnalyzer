//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AudioAnalyzer.Client.DistributorProxy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DistributorProxy.IDistributor", CallbackContract=typeof(AudioAnalyzer.Client.DistributorProxy.IDistributorCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IDistributor {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributor/Subscribe", ReplyAction="http://tempuri.org/IDistributor/SubscribeResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Users.User))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Users.Provider))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Common.Audio.AudioInterface.StereoAudioInterface))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Common.Audio.AudioInterface.AudioInterface))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Common.Audio.AudioInterface.Model.StationContainer))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Common.Audio.AudioInterface.Model.Station[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Common.Audio.AudioInterface.Model.Station))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Common.Audio.AudioInterface.Model.Meter[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Common.Audio.AudioInterface.Model.Meter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Common.Audio.AudioInterface.Model.StationContainer[]))]
        bool Subscribe(AudioAnalyzer.Users.Subscriber subscriber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributor/Subscribe", ReplyAction="http://tempuri.org/IDistributor/SubscribeResponse")]
        System.Threading.Tasks.Task<bool> SubscribeAsync(AudioAnalyzer.Users.Subscriber subscriber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributor/LeaveSubscription", ReplyAction="http://tempuri.org/IDistributor/LeaveSubscriptionResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Users.User))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Users.Provider))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Common.Audio.AudioInterface.StereoAudioInterface))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Common.Audio.AudioInterface.AudioInterface))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Common.Audio.AudioInterface.Model.StationContainer))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Common.Audio.AudioInterface.Model.Station[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Common.Audio.AudioInterface.Model.Station))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Common.Audio.AudioInterface.Model.Meter[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Common.Audio.AudioInterface.Model.Meter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AudioAnalyzer.Common.Audio.AudioInterface.Model.StationContainer[]))]
        void LeaveSubscription(AudioAnalyzer.Users.Subscriber subscriber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributor/LeaveSubscription", ReplyAction="http://tempuri.org/IDistributor/LeaveSubscriptionResponse")]
        System.Threading.Tasks.Task LeaveSubscriptionAsync(AudioAnalyzer.Users.Subscriber subscriber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributor/PublishContextChange", ReplyAction="http://tempuri.org/IDistributor/PublishContextChangeResponse")]
        void PublishContextChange(AudioAnalyzer.Common.Audio.AudioInterface.Model.StationContainer[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributor/PublishContextChange", ReplyAction="http://tempuri.org/IDistributor/PublishContextChangeResponse")]
        System.Threading.Tasks.Task PublishContextChangeAsync(AudioAnalyzer.Common.Audio.AudioInterface.Model.StationContainer[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributor/ConnectPublisher", ReplyAction="http://tempuri.org/IDistributor/ConnectPublisherResponse")]
        void ConnectPublisher(AudioAnalyzer.Users.Provider dataProvider);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributor/ConnectPublisher", ReplyAction="http://tempuri.org/IDistributor/ConnectPublisherResponse")]
        System.Threading.Tasks.Task ConnectPublisherAsync(AudioAnalyzer.Users.Provider dataProvider);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDistributorCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDistributor/ContextChanged")]
        void ContextChanged(AudioAnalyzer.Common.Audio.AudioInterface.Model.StationContainer data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDistributorChannel : AudioAnalyzer.Client.DistributorProxy.IDistributor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DistributorClient : System.ServiceModel.DuplexClientBase<AudioAnalyzer.Client.DistributorProxy.IDistributor>, AudioAnalyzer.Client.DistributorProxy.IDistributor {
        
        public DistributorClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DistributorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DistributorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DistributorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DistributorClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Subscribe(AudioAnalyzer.Users.Subscriber subscriber) {
            return base.Channel.Subscribe(subscriber);
        }
        
        public System.Threading.Tasks.Task<bool> SubscribeAsync(AudioAnalyzer.Users.Subscriber subscriber) {
            return base.Channel.SubscribeAsync(subscriber);
        }
        
        public void LeaveSubscription(AudioAnalyzer.Users.Subscriber subscriber) {
            base.Channel.LeaveSubscription(subscriber);
        }
        
        public System.Threading.Tasks.Task LeaveSubscriptionAsync(AudioAnalyzer.Users.Subscriber subscriber) {
            return base.Channel.LeaveSubscriptionAsync(subscriber);
        }
        
        public void PublishContextChange(AudioAnalyzer.Common.Audio.AudioInterface.Model.StationContainer[] data) {
            base.Channel.PublishContextChange(data);
        }
        
        public System.Threading.Tasks.Task PublishContextChangeAsync(AudioAnalyzer.Common.Audio.AudioInterface.Model.StationContainer[] data) {
            return base.Channel.PublishContextChangeAsync(data);
        }
        
        public void ConnectPublisher(AudioAnalyzer.Users.Provider dataProvider) {
            base.Channel.ConnectPublisher(dataProvider);
        }
        
        public System.Threading.Tasks.Task ConnectPublisherAsync(AudioAnalyzer.Users.Provider dataProvider) {
            return base.Channel.ConnectPublisherAsync(dataProvider);
        }
    }
}
